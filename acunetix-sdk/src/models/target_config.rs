/*
 * Acunetix12 client api
 *
 * Acunetix12 client api [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TargetConfig {
    #[serde(rename = "authentication", skip_serializing_if = "Option::is_none")]
    pub authentication: Option<Box<crate::models::TargetConfigAuthentication>>,
    #[serde(rename = "case_sensitive", skip_serializing_if = "Option::is_none")]
    pub case_sensitive: Option<String>,
    #[serde(rename = "client_certificate_password", skip_serializing_if = "Option::is_none")]
    pub client_certificate_password: Option<String>,
    #[serde(rename = "custom_cookies", skip_serializing_if = "Option::is_none")]
    pub custom_cookies: Option<Vec<crate::models::TargetConfigCustomCookies>>,
    /// MyHeader:myheadervalue
    #[serde(rename = "custom_headers", skip_serializing_if = "Option::is_none")]
    pub custom_headers: Option<Vec<String>>,
    #[serde(rename = "excluded_hours_id", skip_serializing_if = "Option::is_none")]
    pub excluded_hours_id: Option<String>,
    #[serde(rename = "debug", skip_serializing_if = "Option::is_none")]
    pub debug: Option<bool>,
    #[serde(rename = "login", skip_serializing_if = "Option::is_none")]
    pub login: Option<Box<crate::models::TargetConfigLogin>>,
    #[serde(rename = "excluded_paths", skip_serializing_if = "Option::is_none")]
    pub excluded_paths: Option<Vec<String>>,
    #[serde(rename = "scan_speed", skip_serializing_if = "Option::is_none")]
    pub scan_speed: Option<ScanSpeed>,
    #[serde(rename = "technologies", skip_serializing_if = "Option::is_none")]
    pub technologies: Option<Vec<Technologies>>,
    #[serde(rename = "user_agent", skip_serializing_if = "Option::is_none")]
    pub user_agent: Option<String>,
    #[serde(rename = "sensor", skip_serializing_if = "Option::is_none")]
    pub sensor: Option<bool>,
    #[serde(rename = "sensor_secret", skip_serializing_if = "Option::is_none")]
    pub sensor_secret: Option<String>,
    #[serde(rename = "limit_crawler_scope", skip_serializing_if = "Option::is_none")]
    pub limit_crawler_scope: Option<bool>,
    #[serde(rename = "ssh_credentials", skip_serializing_if = "Option::is_none")]
    pub ssh_credentials: Option<Box<crate::models::TargetConfigSshCredentials>>,
    #[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
    pub proxy: Option<Box<crate::models::TargetConfigProxy>>,
}

impl TargetConfig {
    pub fn new() -> TargetConfig {
        TargetConfig {
            authentication: None,
            case_sensitive: None,
            client_certificate_password: None,
            custom_cookies: None,
            custom_headers: None,
            excluded_hours_id: None,
            debug: None,
            login: None,
            excluded_paths: None,
            scan_speed: None,
            technologies: None,
            user_agent: None,
            sensor: None,
            sensor_secret: None,
            limit_crawler_scope: None,
            ssh_credentials: None,
            proxy: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScanSpeed {
    #[serde(rename = "sequential")]
    Sequential,
    #[serde(rename = "slow")]
    Slow,
    #[serde(rename = "moderate")]
    Moderate,
    #[serde(rename = "fast")]
    Fast,
}

impl Default for ScanSpeed {
    fn default() -> ScanSpeed {
        Self::Sequential
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Technologies {
    #[serde(rename = "ASP")]
    ASP,
    #[serde(rename = "ColdFusion/Jrun")]
    ColdFusionJrun,
    #[serde(rename = "Python")]
    Python,
    #[serde(rename = "Rails")]
    Rails,
    #[serde(rename = "PHP")]
    PHP,
    #[serde(rename = "ASP.NET")]
    ASPNET,
    #[serde(rename = "Perl")]
    Perl,
    #[serde(rename = "FrontPage")]
    FrontPage,
    #[serde(rename = "Node.js")]
    NodeJs,
    #[serde(rename = "Java/J2EE")]
    JavaJ2EE,
}

impl Default for Technologies {
    fn default() -> Technologies {
        Self::ASP
    }
}

